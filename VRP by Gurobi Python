import numpy as np
import matplotlib.pyplot as plt

rnd = np.random
rnd.seed(0)

n = 10  # number of clients
xc = rnd.rand(n + 1) * 200  # x-coordinate of clients and the depot
yc = rnd.rand(n + 1) * 100  # y-coordinate of clients and the depot

xc[0] = 2000  # Set the depot to a very far location
yc[0] = 2500  # Set the depot to a very far location



N = [i for i in range(1, n+1)]  # Customers
V = [0] + N
A = [(i, j) for i in V for j in V if i != j]  # Edges between each pair of dots
c = {(i, j): np.hypot(xc[i] - xc[j], yc[i] - yc[j]) for i, j in A}  # Distance
Q = 20  # vehicle capacity
q = {i: rnd.randint(1, 10) for i in N}  # Demand from each customer

from gurobipy import Model, GRB, quicksum
mdl = Model('CVRP')
x = mdl.addVars(A, vtype=GRB.BINARY)  # Decision variable for whether an edge should be chosen.
u = mdl.addVars(N, vtype=GRB.CONTINUOUS)  # load of vehicle before it leaves the node

mdl.modelSense = GRB.MINIMIZE
mdl.setObjective(quicksum(x[i, j] * c[i, j] for (i, j) in A))

mdl.addConstrs(
    quicksum(x[i, j] for j in V if j != i) == 1 for i in N)  # only one edge into customer node i
mdl.addConstrs(
    quicksum(x[i, j] for i in V if i != j) == 1 for j in N)  # only one edge out of customer node i
mdl.addConstrs((x[i, j] == 1) >> (u[i] + q[i] == u[j]) for i, j in A if i != 0 and j != 0)
mdl.addConstrs(u[i] >= q[i] for i in N)
mdl.addConstrs(u[i] <= Q for i in N)

mdl.optimize()

active_arcs = [a for a in A if x[a].X > 0.9]


for i, j in active_arcs:
    plt.plot([xc[i], xc[j]], [yc[i], yc[j]], c='g', zorder=0)
plt.plot(xc[0], yc[0], c='r', marker='s')  # Location of the depot
plt.scatter(xc[1:], yc[1:], c='b')  # Location of clients
